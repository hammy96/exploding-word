<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Phoria OBJ Viewer (Mobile + Debug)</title>
  <script src="phoria-min.js"></script>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      background: #000;
      font-family: monospace;
      height: 100%;
      width: 100%;
    }
    #canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100vw;
      height: calc(100vh - 140px);
      display: block;
    }
    #fileInput {
      position: absolute;
      top: 10px;
      left: 10px;
      z-index: 10;
      background: rgba(255,255,255,0.9);
      padding: 10px;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
    }
    #debug {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100vw;
      height: 140px;
      background: #111;
      color: #0f0;
      font-size: 14px;
      padding: 8px;
      resize: none;
      border: none;
      overflow-y: scroll;
      z-index: 20;
      box-sizing: border-box;
    }
  </style>
</head>
<body>

<input type="file" id="fileInput" accept=".obj">
<canvas id="canvas"></canvas>
<textarea id="debug" readonly></textarea>

<script>
function dbg(s) {
  const debugArea = document.getElementById("debug");
  debugArea.value += s + "\n";
  debugArea.scrollTop = debugArea.scrollHeight;
}

function parseOBJToPhoria(objText) {
  try {
    dbg("Parsing OBJ file...");
    const lines = objText.split("\n");
    const vertices = [];
    const polygons = [];

    for (let line of lines) {
      line = line.trim();
      if (line.startsWith("v ")) {
        const [, x, y, z] = line.split(/\s+/);
        vertices.push({ x: parseFloat(x), y: parseFloat(y), z: parseFloat(z) });
      } else if (line.startsWith("f ")) {
        const [, ...face] = line.split(/\s+/);
        const indices = face.map(f => parseInt(f.split("/")[0]) - 1);
        if (indices.length >= 3) {
          polygons.push({ vertices: indices });
        }
      }
    }

    dbg(`Parsed ${vertices.length} vertices and ${polygons.length} faces.`);
    return {
      points: vertices,
      polygons: polygons.map(p => ({ vertices: p.vertices }))
    };
  } catch (err) {
    dbg("Error during OBJ parsing: " + err.message);
    throw err;
  }
}

window.onload = function () {
  try {
    dbg("Initializing scene...");
    const canvas = document.getElementById('canvas');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight - 140;

    const fileInput = document.getElementById('fileInput');
    const scene = new Phoria.Scene();
    const renderer = Phoria.Renderer.create({ canvas });
    const viewport = Phoria.Viewport.create({ canvas });

    scene.camera.position = { x: 0, y: 0, z: -15 };
    scene.perspective.aspect = canvas.width / canvas.height;

    scene.graph.push(Phoria.DistantLight.create({
      direction: { x: 0, y: -1, z: -1 },
      intensity: 0.7
    }));
    scene.graph.push(Phoria.PointLight.create({
      position: { x: 5, y: 5, z: -5 },
      intensity: 0.8
    }));

    let modelObj = null;
    let rotSpeed = { x: 0, y: 0, z: 0 };

    setInterval(() => {
      rotSpeed = {
        x: (Math.random() - 0.5) * 0.02,
        y: (Math.random() - 0.5) * 0.02,
        z: (Math.random() - 0.5) * 0.02
      };
      dbg(`Rotation speed: x=${rotSpeed.x.toFixed(4)}, y=${rotSpeed.y.toFixed(4)}, z=${rotSpeed.z.toFixed(4)}`);
    }, 3000);

    function loadOBJFromText(objText) {
      try {
        const modelData = parseOBJToPhoria(objText);

        if (modelObj) {
          scene.graph = scene.graph.filter(obj => obj !== modelObj);
          dbg("Previous model removed.");
        }

        modelObj = Phoria.Entity.create({
          points: modelData.points,
          polygons: modelData.polygons,
          style: {
            color: [150, 200, 255],
            drawmode: "solid",
            shading: "lightsource",
            objectsortmode: "back"
          }
        });

        scene.graph.push(modelObj);
        dbg("Model added to scene.");
      } catch (err) {
        dbg("Error loading OBJ: " + err.message);
      }
    }

    fileInput.addEventListener('change', function (e) {
      try {
        const file = e.target.files[0];
        if (file && file.name.toLowerCase().endsWith('.obj')) {
          const reader = new FileReader();
          dbg("Reading file: " + file.name);
          reader.onload = function (event) {
            dbg("File read successfully.");
            loadOBJFromText(event.target.result);
          };
          reader.onerror = function (err) {
            dbg("FileReader error: " + err.message);
          };
          reader.readAsText(file);
        } else {
          dbg("Invalid file selected. Please choose a .obj file.");
        }
      } catch (err) {
        dbg("File selection error: " + err.message);
      }
    });

    function animate() {
      try {
        if (modelObj) {
          modelObj.rotateX(rotSpeed.x);
          modelObj.rotateY(rotSpeed.y);
          modelObj.rotateZ(rotSpeed.z);
        }
        scene.modelView();
        renderer.render(scene, viewport);
        requestAnimationFrame(animate);
      } catch (err) {
        dbg("Animation error: " + err.message);
      }
    }

    animate();
    dbg("Viewer ready.");
  } catch (err) {
    dbg("Initialization error: " + err.message);
  }
};

window.addEventListener('resize', () => {
  const canvas = document.getElementById('canvas');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight - 140;
});
</script>

</body>
</html>
